<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProductsAsync(Int32,RequestContext)">
<example>
This sample shows how to call GetProductsAsync and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = await client.GetProductsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("discontinued").ToString());
]]></code>
This sample shows how to call GetProductsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = await client.GetProductsAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("productName").ToString());
Console.WriteLine(result[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProducts(Int32,RequestContext)">
<example>
This sample shows how to call GetProducts and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = client.GetProducts();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("discontinued").ToString());
]]></code>
This sample shows how to call GetProducts with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = client.GetProducts(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("productName").ToString());
Console.WriteLine(result[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result[0].GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="PostProductAsync(RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call PostProductAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    categoryId = 1234,
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = await client.PostProductAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
This sample shows how to call PostProductAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    productName = "<productName>",
    categoryId = 1234,
    category = new {
        categoryId = 1234,
        categoryName = "<categoryName>",
        description = "<description>",
        picture = "<picture>",
        products = new[] {},
    },
    quantityPerUnit = "<quantityPerUnit>",
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = await client.PostProductAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result.GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="PostProduct(RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call PostProduct with required parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    categoryId = 1234,
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = client.PostProduct(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
This sample shows how to call PostProduct with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    productName = "<productName>",
    categoryId = 1234,
    category = new {
        categoryId = 1234,
        categoryName = "<categoryName>",
        description = "<description>",
        picture = "<picture>",
        products = new[] {},
    },
    quantityPerUnit = "<quantityPerUnit>",
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = client.PostProduct(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result.GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProductAsync(Int32,RequestContext)">
<example>
This sample shows how to call GetProductAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = await client.GetProductAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result.GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProduct(Int32,RequestContext)">
<example>
This sample shows how to call GetProduct with required parameters and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = client.GetProduct(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("categoryName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("picture").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("categoryId").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("category").GetProperty("products")[0].GetProperty("discontinued").ToString());
Console.WriteLine(result.GetProperty("quantityPerUnit").ToString());
Console.WriteLine(result.GetProperty("unitPrice").ToString());
Console.WriteLine(result.GetProperty("unitsInStock").ToString());
Console.WriteLine(result.GetProperty("unitsOnOrder").ToString());
Console.WriteLine(result.GetProperty("reorderLevel").ToString());
Console.WriteLine(result.GetProperty("discontinued").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="PutProductAsync(Int32,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call PutProductAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    categoryId = 1234,
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = await client.PutProductAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
This sample shows how to call PutProductAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    productName = "<productName>",
    categoryId = 1234,
    category = new {
        categoryId = 1234,
        categoryName = "<categoryName>",
        description = "<description>",
        picture = "<picture>",
        products = new[] {},
    },
    quantityPerUnit = "<quantityPerUnit>",
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = await client.PutProductAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="PutProduct(Int32,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call PutProduct with required parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    categoryId = 1234,
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = client.PutProduct(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
This sample shows how to call PutProduct with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

var data = new {
    productId = 1234,
    productName = "<productName>",
    categoryId = 1234,
    category = new {
        categoryId = 1234,
        categoryName = "<categoryName>",
        description = "<description>",
        picture = "<picture>",
        products = new[] {},
    },
    quantityPerUnit = "<quantityPerUnit>",
    unitPrice = 123.45m,
    unitsInStock = 1234,
    unitsOnOrder = 1234,
    reorderLevel = 1234,
    discontinued = true,
};

Response response = client.PutProduct(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  productId: number, # Required.
  productName: string, # Optional.
  categoryId: number, # Required.
  category: {
    categoryId: number, # Required.
    categoryName: string, # Optional.
    description: string, # Optional.
    picture: string, # Optional.
    products: [Product], # Optional.
  }, # Optional.
  quantityPerUnit: string, # Optional.
  unitPrice: number, # Required.
  unitsInStock: number, # Required.
  unitsOnOrder: number, # Required.
  reorderLevel: number, # Required.
  discontinued: boolean, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteProductAsync(Int32,RequestContext)">
<example>
This sample shows how to call DeleteProductAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = await client.DeleteProductAsync(1234);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
    <member name="DeleteProduct(Int32,RequestContext)">
<example>
This sample shows how to call DeleteProduct with required parameters and parse the result.
<code><![CDATA[
var client = new ProductsApiClient();

Response response = client.DeleteProduct(1234);
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
  </members>
</doc>